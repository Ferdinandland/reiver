В бранче solving_high-res_problems есть решение части проблем с выделением памяти. я сохраняю битмап не_inSampleSizе_енный, в UI мы работаем с downscaled версией, а кропаем оригинальный битмап. Появилось больше возможностей касательно high-res картинок, результат высокого разрешения(такого же, как на входе, если не обрезать). Но если пользователь захочет повращать(именно кропнуть во вращении, во время user interaction всё нормально вращает, версия то downscaled) 4к картинку, то нужен largeHeap(возможно native решение). А если он захочет повращать 4к панораму(7786x3000) градусов на 15, то памяти не хватит(оно затребует 190мб). Хотя небольшой угол для панорамы, и наоборот, 90 градусов - нормально тащит. Обычные же кропы(без вращения) 4к картинок тащит без largeHeap. Хотя ту панораму не грузит ни по линку, ни из галереи без largeHeap(оригинальную, а не downscaled). [я когда ту же панораму открываю в галерее - она размыта, а точное изображение грузится понемногу так, кусочками:D]
Насколько я вижу, нужда в native есть только для вращения, что возможно уменьшит тебе объем работы, если ты уже не написал почти всё)) вроде передача в натив и обратно тоже занимает какое-то время(хотя я не разбираюсь в этом), если так, то гонять туда-сюда пикчи по мелочи наверное не выгодно. И, использовать в UI 4к картинки, хоть и из-под натива наверное всё равно затратно(хотя я хз). В этом виде решения передача в натив нужна только в момент кропа, cropImage() класса CropImageView().
Где возможно подтянуть производительность(даже если возьмёшь только код из master), я декодирую источник 2 раза, в original и в sampled виде, может есть способ использовать оригинал для сэмпла.
Если у тебя совсем другой план, я вынесу загрузку в отдельный модуль, или интегрирую в твоё решение.
В понедельник должен быть второй тестовый таск, прогресс бар наверное запилю уже после него.